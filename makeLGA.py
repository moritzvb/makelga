# Copyright 2013 Moritz v. Buttlar, https://github.com/moritzvb/makelga
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#            
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#                            
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#                                    
#  Dieses Programm ist Freie Software: Sie koennen es unter den Bedingungen
#  der GNU General Public License, wie von der Free Software Foundation,
#  Version 3 der Lizenz oder (nach Ihrer Option) jeder spaeteren
#  veroeffentlichten Version, weiterverbreiten und/oder modifizieren.
#                                                    
#  Dieses Programm wird in der Hoffnung, dass es nuetzlich sein wird, aber
#  OHNE JEDE GEWAEHRLEISTUNG, bereitgestellt; sogar ohne die implizite
#  Gewaehrleistung der MARKTFAEHIGKEIT oder EIGNUNG FUER EINEN BESTIMMTEN ZWECK.
#  Siehe die GNU General Public License fuer weitere Details.
#                                                                   
#  Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
#  Programm erhalten haben. Wenn nicht, siehe <http://www.gnu.org/licenses/>.



# This program creates landing patterns for chips or modules in the LGA form factor (e.g. LTM8062) for usage with the
# software FRITZING (see http://www.fritzing.org)
#
# usage: change parameters in this file according to your needs, run it with python (e.g. python makeLGA in linux), import
# the svg file into the part editor of Fritzing.

# package name
name='LGA77';
# open package board svg
fobj_out = open(name+".svg","w")
# Total chip size:
total_chip_size_x_mm=9;
total_chip_size_y_mm=15;
# LGA Grid size
x=7;
y=11;
# LGA pad spacing
xdist=1.27;
ydist=1.27;
# LGA pad size
width=0.635;
height=width;
# svg part size
header_width=total_chip_size_x_mm;
header_height=total_chip_size_y_mm;
# offset (pins position inside the part)
xoffset=(total_chip_size_x_mm-7.62-width)/2;
yoffset=(total_chip_size_y_mm-12.7-width)/2;
# Row pad naming
yname=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q'];
#write header
strout='<?xml version=\'1.0\' encoding=\'UTF-8\' standalone=\'no\'?>\n';
#strout+='<!-- Created with Fritzing (http://www.fritzing.org/) -->\n'
strout+='<!-- Created with makeLGA.py, https://github.com/moritzvb/makelga  -->\n';
strout+='<svg xmlns="http://www.w3.org/2000/svg" width="'+str(header_width)+'mm" x="0mm" version="1.2"  y="0mm" height="'+str(header_height)+'mm" viewBox="0 0 '+str(header_width)+' '+str(header_height)+'" baseProfile="tiny"> \n';
strout+='<desc >Fritzing footprint generated by makeLGA.py</desc> \n';
strout+='  <g  id="silkscreen" stroke-width="0"> \n';
strout+='<title >element:E$1</title> \n';
strout+=' <title >package:'+name+'</title>\n';
# draw the silkscreen for the chip (around outer perimeter)
sx1='"0"';
sy1='"0"';
sx2='"0"';
sy2='"'+str(total_chip_size_y_mm)+'"';
sx3='"'+str(total_chip_size_x_mm)+'"';
sy3=sy2;
sx4=sx3;
sy4=sy1;
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx1+' y1='+sy1+' x2='+sx2+' y2='+sy2+'  stroke-width="0.576" />\n';
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx2+' y1='+sy2+' x2='+sx3+' y2='+sy3+'  stroke-width="0.576" />\n';
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx3+' y1='+sy3+' x2='+sx4+' y2='+sy4+'  stroke-width="0.576" />\n';
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx4+' y1='+sy4+' x2='+sx1+' y2='+sy1+'  stroke-width="0.576" />\n';
# mark pin A1
square_size_x=1.4;
square_size_y=1.8;
sx5='"'+str(square_size_x)+'"';
sy5='"0"';
sx6=sx5;
sy6='"'+str(square_size_y)+'"';
sx7='"0"';
sy7=sy6;
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx5+' y1='+sy5+' x2='+sx6+' y2='+sy6+'  stroke-width="0.2" />\n';
strout+=' <line  stroke="white" stroke-linecap="round" x1='+sx6+' y1='+sy6+' x2='+sx7+' y2='+sy7+'  stroke-width="0.2" />\n';
strout+='  </g>';
# now start drawing copper pads on the top layer
strout+='<g  id="copper1" stroke-width="0">\n';
fobj_out.write(strout)
# do the pad grid
for i in range(x):
 for j in range(y):
    xpos=xdist*i+xoffset;
    ypos=ydist*j+yoffset;
    factor=1;
    if ((i==0) & (j==0)): factor=1.2;
    str_out='<rect width="'+str(width*factor)+'" ';
    str_out+='x="'+str(xpos)+'" ';
    str_out+='y="'+str(ypos)+'" fill="#F7BD13" ';
    str_out+='height="'+str(height*factor)+'" ';
    str_out+='stroke="none" id="';
#    name=yname[j]+str(i+1);
    name='connector'+str(j*x+i)
    str_out+=name+'pad" stroke-width="0"/> \n'; 
    fobj_out.write(str_out)
# close the SVG file
str_out='</g>\n</svg>\n';
fobj_out.write(str_out);
fobj_out.close()
